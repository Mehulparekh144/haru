// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  username        String?
  displayUsername String?
  habits          Habit[]
  HabitCheckin    HabitCheckin[]

  @@unique([email])
  @@unique([username])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

enum HabitFrequency {
  DAILY
  WEEKLY
  BIWEEKLY
}

enum HabitAgent {
  AURI
  KIRO
  SANA
}

enum HabitDuration {
  FOURTEEN
  THIRTY
  SIXTY
  NINETY
}

model Habit {
  id            String         @id @default(uuid())
  name          String
  description   String?
  duration      HabitDuration  @default(THIRTY)
  frequency     HabitFrequency @default(DAILY)
  startDate     DateTime
  timezone      String         @default("America/New_York")
  endDate       DateTime
  agent         HabitAgent     @default(KIRO)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  habitCheckins HabitCheckin[]

  @@map("habit")
}

enum HabitCheckinStatus {
  PENDING
  COMPLETED
  SKIPPED
}

model HabitCheckin {
  id        String             @id @default(uuid())
  habitId   String
  habit     Habit              @relation(fields: [habitId], references: [id], onDelete: Cascade)
  timestamp DateTime
  status    HabitCheckinStatus @default(PENDING)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  User      User?              @relation(fields: [userId], references: [id])
  userId    String?

  @@map("habit_checkin")
}
